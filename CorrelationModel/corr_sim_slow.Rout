
R version 3.6.2 (2019-12-12) -- "Dark and Stormy Night"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin15.6.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> set.seed(10)
> library(mcmcse)
mcmcse: Monte Carlo Standard Errors for MCMC
Version 1.4-3 created on 2020-04-22.
copyright (c) 2012, James M. Flegal, University of California, Riverside
                    John Hughes, University of Colorado, Denver
                    Dootika Vats, University of Warwick
                    Ning Dai, University of Minnesota
 For citation information, type citation("mcmcse").
 Type help("mcmcse-package") to get started.

> library(mvtnorm)
> library(truncnorm)
> library(invgamma)
> library(portkey)
> 
> inv.portkey <- function(prop, curr, beta = 0.99, pf, Cprop, Ccurr, ...) 
+ {
+     x <- NA
+     loops <- 0
+     # print(c(Ccurr, Cprop))
+     C <- Ccurr/(Ccurr + Cprop)
+     if(is.na(C))
+     {
+     	x <- curr
+     	return(list(x = x, loops = loops))
+     }
+     S <- 1
+     while (is.na(x)) 
+     {
+         loops <- loops + 1
+         if (beta != 1) 
+             S <- rbinom(1, 1, beta)
+         if (S == 0) {
+             x <- curr
+             return(list(x = x, loops = loops))
+         }
+         else {
+             C1 <- rbinom(1, 1, C)
+             # print(c(C, C1))
+             if (C1 == 1) {
+                 p1 <- pf(value = curr, ...)
+                 C2 <- rbinom(1, 1, p1)
+                 if (C2 == 1) {
+                   x <- prop
+                   return(list(x = x, loops = loops))
+                 }
+             }
+             else {
+                 p2 <- pf(value = prop, ...)
+                 C2 <- rbinom(1, 1, p2)
+                 if (C2 == 1) {
+                   x <- curr
+                   return(list(x = x, loops = loops))
+                 }
+             }
+         }
+     }
+ }
> 
> lims <- function(i,j,R)
+ {
+ 	R0 <- Rneg1 <- R1 <- R
+ 	R1[j,i] <- R1[i,j] <- 1
+ 	Rneg1[j,i] <- Rneg1[i,j] <- -1
+ 	R0[j,i] <- R0[i,j] <- 0
+ 	lims <- c(-1,1)
+ 
+ 	f1 <- det(R1)
+ 	fneg1 <- det(Rneg1)
+ 	f0 <- det(R0)
+ 	a <- (f1 + fneg1 - 2*f0)/2
+ 	b <- (f1 - fneg1)/2
+ 	c <- f0	
+   if(delta(a,b,c) > 0){ # first case D>0
+         x_1 = (-b+sqrt(delta(a,b,c)))/(2*a)
+         x_2 = (-b-sqrt(delta(a,b,c)))/(2*a)
+         result = c(x_1,x_2)
+         return(result)
+   }
+   else if(delta(a,b,c) == 0){ # second case D=0
+         x = -b/(2*a)
+         return(x)
+   }
+   else {return(c(-1,1))} # third case D<0
+ }
> 
> # Constructing delta
> delta<-function(a,b,c){
+       b^2-4*a*c
+ }
> 
> rij_like <- function(i,j,y, R, mu, sig2)
+ {
+ 	n <- dim(y)[1]
+ 	p <- dim(y)[2]
+ 
+ 	B <- t(y) %*% y
+ 	rij <- R[i,j]
+ 	foo <- -(n/2)*determinant(R, logarithm = TRUE)$modulus - sum(diag((solve(R) %*%B)))/2
+ 	foo <- foo - (rij - mu)^2/(2*sig2)
+ 	return(foo)
+ }
> 
> drawR1 <- function(value, sig2, p)
+ {
+ 	l <- p*(p-1)/2
+ 	rs <- rtruncnorm(l, a = -1, b = 1, mean = value, sd = sqrt(sig2) ) #  rnorm(l, mean = value, sd = sqrt(sig2))
+ 	R <- matrix(0, nrow = p, ncol = p)
+ 	R[which(lower.tri(R))] <- rs
+ 	R <- R + t(R)
+ 	diag(R) <- 1
+ 	rtn <- ifelse(min(eigen(R)$values) <= 0, 0, 1)
+ 	return(rtn)
+ }
> drawR2 <- function(value, mu, p)
+ {
+ 	l <- p*(p-1)/2
+ 	rs <- rtruncnorm(l, a = -1, b = 1, mean = mu, sd = sqrt(value) ) #rnorm(l, mean = mu, sd = sqrt(value))
+ 	R <- matrix(0, nrow = p, ncol = p)
+ 	R[which(lower.tri(R))] <- rs
+ 	R <- R + t(R)
+ 	diag(R) <- 1
+ 	rtn <- ifelse(min(eigen(R)$values) <= 0, 0, 1)
+ 	return(rtn)
+ }
> 
> Cbound.mu <- function(mu, mu.mean, mu.var, sig2, l)
+ {
+ 	foo <- pnorm((1 - mu)/sqrt(sig2)) - pnorm((-1 - mu)/sqrt(sig2))^l
+ 	 rtn <- log(foo) - dnorm(mu, mean = mu.mean, sd = sqrt(mu.var), log = TRUE)
+ 	 return(exp(rtn))
+ }
> 
> Cbound.sig <- function(sig2, sig2.shape, sig2.param, mu, l)
+ {
+ 	foo <- pnorm((1 - mu)/sqrt(sig2)) - pnorm((-1 - mu)/sqrt(sig2))^l
+ 	 rtn <- log(foo) - dinvgamma(sig2, shape = sig2.shape, rate = sig2.param, log = TRUE)
+ 	 return(exp(rtn))
+ }
> CorMCMC <- function(y, tau2, alpha, beta, port = 1, nsim = 1e3, h = rep(.005, dim(y)[2]*(dim(y)[2] - 1)/2))
+ {
+ 	n <- dim(y)[1]
+ 	p <- dim(y)[2]
+ 	R <- cor(y)#matrix(.9, nrow = p, ncol = p)
+ 	diag(R) <- 1
+ 	l <- p*(p-1)/2	
+ 
+ 	mu <- sum(lower.tri(R)*R)/l
+ 	sig2 <- 1
+ 	loops <- matrix(0, nrow = nsim, ncol = 2)
+ 
+ 
+ 	acc <- rep(0, l+2)
+ 	out <- matrix(0, nrow = nsim, ncol = l+2)
+ 	out[1, ] <- c(R[which(lower.tri(R) )], mu, sig2)	
+ 
+ 	lower <- lower.tri(R)
+ 
+ 	for(t in 2:nsim)
+ 	{
+ 		if(t%%(nsim/10) == 0) print(paste("nsim =", t))
+ 		count <- 0
+ 		for(i in 2:p)
+ 		{
+ 			for(j in 1:(i-1))
+ 			{	
+ 				count <- count+1
+ 				R.prop <- R
+ 				lim <- lims(i,j,R)
+ 				# print(c(t,lim))
+ 				prop <- R[i,j] + runif(1, min = -h[count], max = h[count]) #rtruncnorm(1, a=lim[1], b=lim[2], mean = R[i,j], sd = h)#runif(1, min = lim[1], max = lim[2])
+ 				R.prop[i,j] <- R.prop[j,i] <- prop
+ 
+ 				if( prop < lim[2] && prop > lim[1])
+ 				{
+ 					ratio <- rij_like(i,j, y, R.prop, mu, sig2) -  rij_like(i,j, y, R, mu, sig2)
+ 					if(log(runif(1)) < ratio)
+ 					{
+ 						R[i,j] <- R[j,i] <- prop
+ 						acc[count] <- acc[count] + 1
+ 					}
+ 				} 
+ 			}
+ 		}
+ 		r.bar <- sum(lower*R)/l
+ 		mu.mean <- tau2*l*r.bar/(sig2 + l*tau2) 
+ 		mu.var <- sig2*tau2/(sig2 + l*tau2)
+ 		
+ 
+ 		# portkey
+ 		mu.prop <- rnorm(1, mean = mu, sd = .55)
+ 		Cprop <- Cbound.mu(mu = mu.prop, mu.mean, mu.var, sig2 = sig2, l = l)
+ 		Ccurr <- Cbound.mu(mu = mu, mu.mean, mu.var, sig2 = sig2, l = l)
+ 		# mu.prop <- rnorm(1, mean = mu.mean, sd = sqrt(mu.var))
+ 
+ 		port1 <- inv.portkey(prop = mu.prop, curr = mu, beta = port, pf = drawR1, Cprop = Cprop, Ccurr = Ccurr, sig2 = sig2, p = p)
+ 		if(port1$x == mu.prop) acc[count+1] = acc[count+1] + 1
+ 		mu <- port1$x
+ 		loops[t, 1] <- port1$loops
+ 
+ 		sig2.param <- (2*beta + sum((R[which(lower )] - mu)^2)  )/2
+ 		# sig2.prop <- 1/rgamma(1, shape = alpha + l/2, rate = sig2.param)
+ 
+ 		sig2.prop <- rnorm(1, mean = sig2, sd = .40)
+ 		
+ 		if(sig2.prop > 0)
+ 		{
+ 			Cprop <- Cbound.sig(sig2.prop, sig2.shape = alpha + l/2, sig2.param = sig2.param, mu = mu, l = l)
+ 			Ccurr <- Cbound.sig(sig2, sig2.shape = alpha + l/2, sig2.param = sig2.param, mu = mu, l = l)
+ 
+ 			port2 <- inv.portkey(prop = sig2.prop, curr = sig2, beta = port, pf = drawR2, Cprop = Cprop, Ccurr = Ccurr, mu = mu, p = p)
+ 			if(port2$x == sig2.prop) acc[count+2] = acc[count+2] + 1
+ 			sig2 <- port2$x
+ 			loops[t, 2] <- port2$loops		
+ 		}
+ 		out[t, ] <- c(R[which(lower )], mu, sig2)
+ 	}
+ 	print(colMeans(loops))
+ 	print(apply(loops,2, max))
+ 	print(acc/nsim)
+ 	return(list("out" = out, "loops" = loops, "acc" = tail(acc,2)/nsim) )
+ }
> 
> 
> y <- EuStockMarkets
> y <- scale(y, center = FALSE, scale = apply(y, 2, sd))
> tau2 <- 1
> alpha <- 1
> beta <- 1
> nsim <- 1e4
> h <- c(.0015, rep(.005,4), .01)
> R <- cor(y)
> 
> # time1 <- system.time(chain1 <- CorMCMC(y = y, tau2 = tau2, alpha = alpha, beta = beta, port = 1, nsim = nsim, h = h))
> # time9 <- system.time(chain9 <- CorMCMC(y = y, tau2 = tau2, alpha = alpha, beta = beta, port = .90, nsim = nsim, h = h))
> 
> 
> B <- 1e1
> time <- matrix(0, nrow = B, ncol = 2)
> ess <- matrix(0, nrow = B, ncol = 2)
> max1.l <- matrix(0, nrow = B, ncol = 2)
> mean1.l <- matrix(0, nrow = B, ncol = 2)
> 
> max2.l <- matrix(0, nrow = B, ncol = 2)
> mean2.l <- matrix(0, nrow = B, ncol = 2)
> 
> for(b in 1:B)
+ {
+ 
+ 	time[b,1] <- system.time(chain1 <- CorMCMC(y = y, tau2 = tau2, alpha = alpha, beta = beta, port = 1, nsim = nsim, h = h))[3]
+ 	time[b,2] <- system.time(chain99 <- CorMCMC(y = y, tau2 = tau2, alpha = alpha, beta = beta, port = .90, nsim = nsim, h = h))[3]
+ 
+ 
+ 	ess[b,1] <- multiESS(chain1$out, size = "sqroot", r = 1)
+ 	ess[b,2] <- multiESS(chain99$out, size = "sqroot", r = 1)
+ 
+ 	max1.l[b,1] <- max(chain1$loops[,1])
+ 	max1.l[b,2] <- max(chain99$loops[,1])
+ 
+ 	max2.l[b,1] <- max(chain1$loops[,2])
+ 	max2.l[b,2] <- max(chain99$loops[,2])	
+ 
+ 	mean1.l[b,1] <- mean(chain1$loops[,1])
+ 	mean1.l[b,2] <- mean(chain99$loops[,1])
+ 
+ 	mean2.l[b,1] <- mean(chain1$loops[,2])
+ 	mean2.l[b,2] <- mean(chain99$loops[,2])	
+ 
+ 	print(b)
+ 
+ 	save(time, ess, max1.l, max2.l, mean1.l, mean2.l, file = "correlation_sim")
+ }
[1] "nsim = 1000"
[1] "nsim = 2000"
[1] "nsim = 3000"
[1] "nsim = 4000"
[1] "nsim = 5000"
[1] "nsim = 6000"
[1] "nsim = 7000"
[1] "nsim = 8000"
[1] "nsim = 9000"
[1] "nsim = 10000"
[1] 4.5426 3.1409
[1] 4987   46
[1] 0.2312 0.1559 0.1699 0.2161 0.2136 0.1881 0.2957 0.2852
[1] "nsim = 1000"
[1] "nsim = 2000"
[1] "nsim = 3000"
[1] "nsim = 4000"
[1] "nsim = 5000"
[1] "nsim = 6000"
[1] "nsim = 7000"
[1] "nsim = 8000"
[1] "nsim = 9000"
[1] "nsim = 10000"
[1] 2.9932 2.4729
[1] 29 30
[1] 0.2358 0.1596 0.1750 0.2163 0.2324 0.1808 0.2033 0.2036
[1] 1
[1] "nsim = 1000"
[1] "nsim = 2000"
[1] "nsim = 3000"
[1] "nsim = 4000"
[1] "nsim = 5000"
[1] "nsim = 6000"
[1] "nsim = 7000"
[1] "nsim = 8000"
[1] "nsim = 9000"
[1] "nsim = 10000"
[1] 1481.3767    3.1003
[1] 14763661       37
[1] 0.2324 0.1634 0.1608 0.2214 0.2222 0.1790 0.2767 0.2833
[1] "nsim = 1000"
[1] "nsim = 2000"
[1] "nsim = 3000"
[1] "nsim = 4000"
[1] "nsim = 5000"
[1] "nsim = 6000"
[1] "nsim = 7000"
[1] "nsim = 8000"
[1] "nsim = 9000"
[1] "nsim = 10000"
[1] 2.9735 2.5075
[1] 31 23
[1] 0.2368 0.1605 0.1629 0.2191 0.2295 0.1833 0.2085 0.2028
[1] 2
[1] "nsim = 1000"
[1] "nsim = 2000"
[1] "nsim = 3000"
[1] "nsim = 4000"
[1] "nsim = 5000"
[1] "nsim = 6000"
[1] "nsim = 7000"
[1] "nsim = 8000"
[1] "nsim = 9000"
[1] "nsim = 10000"
[1] 4.2398 3.1786
[1] 2090   40
[1] 0.2348 0.1582 0.1631 0.2163 0.2288 0.1797 0.2925 0.2952
[1] "nsim = 1000"
[1] "nsim = 2000"
[1] "nsim = 3000"
[1] "nsim = 4000"
[1] "nsim = 5000"
[1] "nsim = 6000"
[1] "nsim = 7000"
[1] "nsim = 8000"
[1] "nsim = 9000"
[1] "nsim = 10000"
[1] 2.9801 2.5161
[1] 33 24
[1] 0.2298 0.1573 0.1603 0.2199 0.2227 0.1821 0.2104 0.2035
[1] 3
[1] "nsim = 1000"
[1] "nsim = 2000"
[1] "nsim = 3000"
[1] "nsim = 4000"
[1] "nsim = 5000"
[1] "nsim = 6000"
[1] "nsim = 7000"
[1] "nsim = 8000"
[1] "nsim = 9000"
[1] "nsim = 10000"
[1] 4.3722 3.1750
[1] 2700   37
[1] 0.2315 0.1570 0.1657 0.2191 0.2299 0.1796 0.2812 0.2874
[1] "nsim = 1000"
[1] "nsim = 2000"
[1] "nsim = 3000"
[1] "nsim = 4000"
[1] "nsim = 5000"
[1] "nsim = 6000"
[1] "nsim = 7000"
[1] "nsim = 8000"
[1] "nsim = 9000"
[1] "nsim = 10000"
[1] 3.0127 2.4791
[1] 44 23
[1] 0.2338 0.1571 0.1588 0.2275 0.2257 0.1746 0.2037 0.2002
[1] 4
[1] "nsim = 1000"
[1] "nsim = 2000"
[1] "nsim = 3000"
[1] "nsim = 4000"
[1] "nsim = 5000"
[1] "nsim = 6000"
[1] "nsim = 7000"
[1] "nsim = 8000"
[1] "nsim = 9000"
[1] "nsim = 10000"
[1] 6.2615 3.1939
[1] 9513   35
[1] 0.2356 0.1580 0.1677 0.2177 0.2208 0.1741 0.2836 0.2860
[1] "nsim = 1000"
[1] "nsim = 2000"
[1] "nsim = 3000"
[1] "nsim = 4000"
[1] "nsim = 5000"
[1] "nsim = 6000"
[1] "nsim = 7000"
[1] "nsim = 8000"
[1] "nsim = 9000"
[1] "nsim = 10000"
[1] 3.0399 2.4094
[1] 26 26
[1] 0.2379 0.1586 0.1634 0.2209 0.2290 0.1798 0.2115 0.2057
[1] 5
[1] "nsim = 1000"
[1] "nsim = 2000"
[1] "nsim = 3000"
[1] "nsim = 4000"
[1] "nsim = 5000"
[1] "nsim = 6000"
[1] "nsim = 7000"
[1] "nsim = 8000"
[1] "nsim = 9000"
[1] "nsim = 10000"
[1] 7.2763 3.2587
[1] 26830    36
[1] 0.2386 0.1634 0.1640 0.2167 0.2254 0.1818 0.3000 0.2903
[1] "nsim = 1000"
[1] "nsim = 2000"
[1] "nsim = 3000"
[1] "nsim = 4000"
[1] "nsim = 5000"
[1] "nsim = 6000"
[1] "nsim = 7000"
[1] "nsim = 8000"
[1] "nsim = 9000"
[1] "nsim = 10000"
[1] 2.9622 2.4671
[1] 33 24
[1] 0.2260 0.1605 0.1701 0.2096 0.2258 0.1818 0.2116 0.2091
[1] 6
[1] "nsim = 1000"
[1] "nsim = 2000"
[1] "nsim = 3000"
[1] "nsim = 4000"
[1] "nsim = 5000"
[1] "nsim = 6000"
[1] "nsim = 7000"
[1] "nsim = 8000"
[1] "nsim = 9000"
[1] "nsim = 10000"
[1] 5.0637 3.2754
[1] 6797   40
[1] 0.2326 0.1626 0.1666 0.2241 0.2224 0.1850 0.2949 0.2961
[1] "nsim = 1000"
[1] "nsim = 2000"
[1] "nsim = 3000"
[1] "nsim = 4000"
[1] "nsim = 5000"
[1] "nsim = 6000"
[1] "nsim = 7000"
[1] "nsim = 8000"
[1] "nsim = 9000"
[1] "nsim = 10000"
[1] 2.9742 2.5386
[1] 23 37
[1] 0.2297 0.1605 0.1712 0.2199 0.2243 0.1789 0.2053 0.2139
[1] 7
[1] "nsim = 1000"
[1] "nsim = 2000"
[1] "nsim = 3000"
[1] "nsim = 4000"
[1] "nsim = 5000"
[1] "nsim = 6000"
[1] "nsim = 7000"
[1] "nsim = 8000"
[1] "nsim = 9000"
[1] "nsim = 10000"
[1] 160.8740   3.2291
[1] 1004724      36
[1] 0.2359 0.1627 0.1682 0.2196 0.2159 0.1830 0.3061 0.2958
[1] "nsim = 1000"
[1] "nsim = 2000"
[1] "nsim = 3000"
[1] "nsim = 4000"
[1] "nsim = 5000"
[1] "nsim = 6000"
[1] "nsim = 7000"
[1] "nsim = 8000"
[1] "nsim = 9000"
[1] "nsim = 10000"
[1] 2.9488 2.4779
[1] 33 33
[1] 0.2375 0.1677 0.1693 0.2181 0.2358 0.1718 0.2073 0.1997
[1] 8
[1] "nsim = 1000"
[1] "nsim = 2000"
[1] "nsim = 3000"
[1] "nsim = 4000"
[1] "nsim = 5000"
[1] "nsim = 6000"
[1] "nsim = 7000"
[1] "nsim = 8000"
[1] "nsim = 9000"
[1] "nsim = 10000"
[1] 501.5307   3.2847
[1] 4974576      38
[1] 0.2370 0.1589 0.1657 0.2160 0.2310 0.1786 0.3037 0.2987
[1] "nsim = 1000"
[1] "nsim = 2000"
[1] "nsim = 3000"
[1] "nsim = 4000"
[1] "nsim = 5000"
[1] "nsim = 6000"
[1] "nsim = 7000"
[1] "nsim = 8000"
[1] "nsim = 9000"
[1] "nsim = 10000"
[1] 3.0023 2.4834
[1] 55 27
[1] 0.2374 0.1606 0.1730 0.2181 0.2219 0.1825 0.2043 0.1987
[1] 9
[1] "nsim = 1000"
[1] "nsim = 2000"
[1] "nsim = 3000"
[1] "nsim = 4000"
[1] "nsim = 5000"
[1] "nsim = 6000"
[1] "nsim = 7000"
[1] "nsim = 8000"
[1] "nsim = 9000"
[1] "nsim = 10000"
[1] 8.7527 3.2135
[1] 46073    33
[1] 0.2425 0.1599 0.1702 0.2159 0.2241 0.1791 0.2919 0.2830
[1] "nsim = 1000"
[1] "nsim = 2000"
[1] "nsim = 3000"
[1] "nsim = 4000"
[1] "nsim = 5000"
[1] "nsim = 6000"
[1] "nsim = 7000"
[1] "nsim = 8000"
[1] "nsim = 9000"
[1] "nsim = 10000"
[1] 2.9919 2.5385
[1] 30 24
[1] 0.2293 0.1548 0.1679 0.2247 0.2295 0.1776 0.2119 0.2146
[1] 10
> 
> rm(list = ls())
> load("correlation_sim")
> B <- 1e1
> round(colMeans(ess))
[1] 542 496
> round(apply(ess, 2, sd)/sqrt(B), 1)
[1] 13.5  9.0
> 
> round(colMeans(ess/time), 3)
[1]  9.633 14.825
> round(apply(ess/time, 2, sd)/sqrt(B), 3)
[1] 1.992 0.279
> 
> round(colMeans(mean1.l), 2)
[1] 218.43   2.99
> round(apply(mean1.l, 2, sd)/sqrt(B), 2)
[1] 148.89   0.01
> 
> round(colMeans(mean2.l), 2)
[1] 3.21 2.49
> round(apply(mean2.l, 2, sd)/sqrt(B), 2)
[1] 0.02 0.01
> 
> round(colMeans(max1.l))
[1] 2084195      34
> round(apply(max1.l, 2, sd)/sqrt(B), 2)
[1] 1491777.04       2.94
> 
> round(colMeans(max2.l))
[1] 38 27
> round(apply(max2.l, 2, sd)/sqrt(B), 2)
[1] 1.13 1.51
> 
> 
> 
> proc.time()
    user   system  elapsed 
4994.197  100.575 5120.876 
