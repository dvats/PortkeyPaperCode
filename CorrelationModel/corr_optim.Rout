
R version 4.0.2 (2020-06-22) -- "Taking Off Again"
Copyright (C) 2020 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin17.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> options(error=dump.frames)
> set.seed(10)
> library(mcmcse)
mcmcse: Monte Carlo Standard Errors for MCMC
Version 1.4-1 created on 2020-01-29.
copyright (c) 2012, James M. Flegal, University of California, Riverside
                    John Hughes, University of Colorado, Denver
                    Dootika Vats, University of Warwick
                    Ning Dai, University of Minnesota
 For citation information, type citation("mcmcse").
 Type help("mcmcse-package") to get started.

> library(mvtnorm)
> library(truncnorm)
> library(invgamma)
> library(portkey)
Error in library(portkey) : there is no package called ‘portkey’
> 
> inv.portkey <- function(prop, curr, beta = 0.99, pf, Cprop, Ccurr, ...) 
+ {
+     x <- NA
+     loops <- 0
+     # print(c(Ccurr, Cprop))
+     C <- Ccurr/(Ccurr + Cprop)
+     if(is.na(C))
+     {
+     	x <- curr
+     	return(list(x = x, loops = loops))
+     }
+     S <- 1
+     while (is.na(x)) 
+     {
+         loops <- loops + 1
+         if (beta != 1) 
+             S <- rbinom(1, 1, beta)
+         if (S == 0) {
+             x <- curr
+             return(list(x = x, loops = loops))
+         }
+         else {
+             C1 <- rbinom(1, 1, C)
+             # print(c(C, C1))
+             if (C1 == 1) {
+                 p1 <- pf(value = curr, ...)
+                 C2 <- rbinom(1, 1, p1)
+                 if (C2 == 1) {
+                   x <- prop
+                   return(list(x = x, loops = loops))
+                 }
+             }
+             else {
+                 p2 <- pf(value = prop, ...)
+                 C2 <- rbinom(1, 1, p2)
+                 if (C2 == 1) {
+                   x <- curr
+                   return(list(x = x, loops = loops))
+                 }
+             }
+         }
+     }
+ }
> 
> lims <- function(i,j,R)
+ {
+ 	R0 <- Rneg1 <- R1 <- R
+ 	R1[j,i] <- R1[i,j] <- 1
+ 	Rneg1[j,i] <- Rneg1[i,j] <- -1
+ 	R0[j,i] <- R0[i,j] <- 0
+ 	lims <- c(-1,1)
+ 
+ 	f1 <- det(R1)
+ 	fneg1 <- det(Rneg1)
+ 	f0 <- det(R0)
+ 	a <- (f1 + fneg1 - 2*f0)/2
+ 	b <- (f1 - fneg1)/2
+ 	c <- f0	
+   if(delta(a,b,c) > 0){ # first case D>0
+         x_1 = (-b+sqrt(delta(a,b,c)))/(2*a)
+         x_2 = (-b-sqrt(delta(a,b,c)))/(2*a)
+         result = c(x_1,x_2)
+         return(result)
+   }
+   else if(delta(a,b,c) == 0){ # second case D=0
+         x = -b/(2*a)
+         return(x)
+   }
+   else {return(c(-1,1))} # third case D<0
+ }
> 
> # Constructing delta
> delta<-function(a,b,c){
+       b^2-4*a*c
+ }
> 
> rij_like <- function(i,j,y, R, mu, sig2)
+ {
+ 	n <- dim(y)[1]
+ 	p <- dim(y)[2]
+ 
+ 	B <- t(y) %*% y
+ 	rij <- R[i,j]
+ 	foo <- -(n/2)*determinant(R, logarithm = TRUE)$modulus - sum(diag((solve(R) %*%B)))/2
+ 	foo <- foo - (rij - mu)^2/(2*sig2)
+ 	return(foo)
+ }
> 
> drawR1 <- function(value, sig2, p)
+ {
+ 	l <- p*(p-1)/2
+ 	rs <- rtruncnorm(l, a = -1, b = 1, mean = value, sd = sqrt(sig2) ) #  rnorm(l, mean = value, sd = sqrt(sig2))
+ 	R <- matrix(0, nrow = p, ncol = p)
+ 	R[which(lower.tri(R))] <- rs
+ 	R <- R + t(R)
+ 	diag(R) <- 1
+ 	rtn <- ifelse(min(eigen(R)$values) <= 0, 0, 1)
+ 	return(rtn)
+ }
> drawR2 <- function(value, mu, p)
+ {
+ 	l <- p*(p-1)/2
+ 	rs <- rtruncnorm(l, a = -1, b = 1, mean = mu, sd = sqrt(value) ) #rnorm(l, mean = mu, sd = sqrt(value))
+ 	R <- matrix(0, nrow = p, ncol = p)
+ 	R[which(lower.tri(R))] <- rs
+ 	R <- R + t(R)
+ 	diag(R) <- 1
+ 	rtn <- ifelse(min(eigen(R)$values) <= 0, 0, 1)
+ 	return(rtn)
+ }
> 
> Cbound.mu <- function(mu, mu.mean, mu.var, sig2, l)
+ {
+ 	foo <- pnorm((1 - mu)/sqrt(sig2)) - pnorm((-1 - mu)/sqrt(sig2))^l
+ 	 rtn <- log(foo) - dnorm(mu, mean = mu.mean, sd = sqrt(mu.var), log = TRUE)
+ 	 return(exp(rtn))
+ }
> 
> Cbound.sig <- function(sig2, sig2.shape, sig2.param, mu, l)
+ {
+ 	foo <- pnorm((1 - mu)/sqrt(sig2)) - pnorm((-1 - mu)/sqrt(sig2))^l
+ 	 rtn <- log(foo) - dinvgamma(sig2, shape = sig2.shape, rate = sig2.param, log = TRUE)
+ 	 return(exp(rtn))
+ }
> CorMCMC <- function(y, tau2, alpha, beta, port = 1, nsim = 1e3, h = rep(.005, dim(y)[2]*(dim(y)[2] - 1)/2), mu.sd = .55, sig2.sd = .60)
+ {
+ 	n <- dim(y)[1]
+ 	p <- dim(y)[2]
+ 	R <- cor(y)
+ 	diag(R) <- 1
+ 	l <- p*(p-1)/2	
+ 
+ 	mu <- sum(lower.tri(R)*R)/l
+ 	sig2 <- 1
+ 	loops <- matrix(0, nrow = nsim, ncol = 2)
+ 
+ 
+ 	acc <- rep(0, l+2)
+ 	out <- matrix(0, nrow = nsim, ncol = l+2)
+ 	out[1, ] <- c(R[which(lower.tri(R) )], mu, sig2)	
+ 
+ 	lower <- lower.tri(R)
+ 
+ 	for(t in 2:nsim)
+ 	{
+ 		if(t%%(nsim/10) == 0) print(paste("nsim =", t))
+ 		count <- 0
+ 		for(i in 2:p)
+ 		{
+ 			for(j in 1:(i-1))
+ 			{	
+ 				count <- count+1
+ 				R.prop <- R
+ 				lim <- lims(i,j,R)
+ 				# print(c(t,lim))
+ 				prop <- R[i,j] + runif(1, min = -h[count], max = h[count]) #rtruncnorm(1, a=lim[1], b=lim[2], mean = R[i,j], sd = h)#runif(1, min = lim[1], max = lim[2])
+ 				R.prop[i,j] <- R.prop[j,i] <- prop
+ 
+ 				if( prop < lim[2] && prop > lim[1])
+ 				{
+ 					ratio <- rij_like(i,j, y, R.prop, mu, sig2) -  rij_like(i,j, y, R, mu, sig2)
+ 					if(log(runif(1)) < ratio)
+ 					{
+ 						R[i,j] <- R[j,i] <- prop
+ 						acc[count] <- acc[count] + 1
+ 					}
+ 				} 
+ 			}
+ 		}
+ 		r.bar <- sum(lower*R)/l
+ 		mu.mean <- tau2*l*r.bar/(sig2 + l*tau2) 
+ 		mu.var <- sig2*tau2/(sig2 + l*tau2)
+ 		
+ 
+ 		# portkey
+ 		mu.prop <- rnorm(1, mean = mu, sd = mu.sd)
+ 		Cprop <- Cbound.mu(mu = mu.prop, mu.mean, mu.var, sig2 = sig2, l = l)
+ 		Ccurr <- Cbound.mu(mu = mu, mu.mean, mu.var, sig2 = sig2, l = l)
+ 		# mu.prop <- rnorm(1, mean = mu.mean, sd = sqrt(mu.var))
+ 
+ 		port1 <- inv.portkey(prop = mu.prop, curr = mu, beta = port, pf = drawR1, Cprop = Cprop, Ccurr = Ccurr, sig2 = sig2, p = p)
+ 		if(port1$x == mu.prop) acc[count+1] = acc[count+1] + 1
+ 		mu <- port1$x
+ 		loops[t, 1] <- port1$loops
+ 
+ 		sig2.param <- (2*beta + sum((R[which(lower )] - mu)^2)  )/2
+ 		# sig2.prop <- 1/rgamma(1, shape = alpha + l/2, rate = sig2.param)
+ 
+ 		sig2.prop <- rnorm(1, mean = sig2, sd = sig2.sd)
+ 		
+ 		if(sig2.prop > 0)
+ 		{
+ 			Cprop <- Cbound.sig(sig2.prop, sig2.shape = alpha + l/2, sig2.param = sig2.param, mu = mu, l = l)
+ 			Ccurr <- Cbound.sig(sig2, sig2.shape = alpha + l/2, sig2.param = sig2.param, mu = mu, l = l)
+ 
+ 			port2 <- inv.portkey(prop = sig2.prop, curr = sig2, beta = port, pf = drawR2, Cprop = Cprop, Ccurr = Ccurr, mu = mu, p = p)
+ 			if(port2$x == sig2.prop) acc[count+2] = acc[count+2] + 1
+ 			sig2 <- port2$x
+ 			loops[t, 2] <- port2$loops		
+ 		}
+ 		out[t, ] <- c(R[which(lower )], mu, sig2)
+ 	}
+ 	print(colMeans(loops))
+ 	print(apply(loops,2, max))
+ 	print(acc/nsim)
+ 	return(list("out" = out, "loops" = loops, "acc" = tail(acc,2)/nsim) )
+ }
> 
> 
> 
> y <- EuStockMarkets
> y <- scale(y, center = FALSE, scale = apply(y, 2, sd))
> tau2 <- 1
> alpha <- 1
> beta <- 1
> v2 <- .001
> nsim <- 1e4
> h <- c(.0025, rep(.006,2), rep(.007,2), .010)
> mu.sd <- 1
> sig2.sd <- .70
>  
> time9 <- system.time(chain9 <- CorMCMC(y = y, tau2 = tau2, alpha = alpha, beta = beta, port = .90, nsim = nsim, h = h, mu.sd = mu.sd, sig2.sd = sig2.sd))
[1] "nsim = 1000"
[1] "nsim = 2000"
[1] "nsim = 3000"
[1] "nsim = 4000"
[1] "nsim = 5000"
[1] "nsim = 6000"
[1] "nsim = 7000"
[1] "nsim = 8000"
[1] "nsim = 9000"
[1] "nsim = 10000"
[1] 3.4066 2.2454
[1] 53 24
[1] 0.1353 0.1313 0.1376 0.1654 0.1629 0.1789 0.1314 0.1465
> 
> multiESS(chain9$out, size = "sqroot", r = 1)
[1] 514.5632
> multiESS(chain9$out, size = "sqroot", r = 1)/time9[3]
 elapsed 
13.23771 
> 
> 
> time1 <- {
+ 	setTimeLimit(86400)
+ 	system.time(chain1 <- CorMCMC(y = y, tau2 = tau2, alpha = alpha, beta = beta, port = 1, nsim = nsim, h = h, mu.sd = mu.sd, sig2.sd = sig2.sd))
+ }	
Error in stopifnot(length(a) > 0, length(b) > 0, length(mean) > 0, length(sd) >  : 
  reached CPU time limit
Calls: system.time ... CorMCMC -> inv.portkey -> pf -> rtruncnorm -> stopifnot
Timing stopped at: 8.468e+04 1724 8.694e+04
> setTimeLimit(Inf)
> 
> 
> multiESS(chain1$out, size = "sqroot", r = 1)
Error in as.matrix(x) : object 'chain1' not found
Calls: multiESS -> as.matrix
> multiESS(chain1$out, size = "sqroot", r = 1)/time1[3]
Error in as.matrix(x) : object 'chain1' not found
Calls: multiESS -> as.matrix
> 
> proc.time()
     user    system   elapsed 
84710.546  1728.165 86979.491 
